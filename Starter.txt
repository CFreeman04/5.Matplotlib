# Pymaceuticals Inc.
---

### Analysis

- Add your analysis here.
 
%matplotlib notebook
%matplotlib inline

# Dependencies and Setup
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import scipy.stats as st

# Study data files
mouse_metadata_path = "data/Mouse_metadata.csv"
study_results_path = "data/Study_results.csv"

# Read the mouse data and the study results
mouse_metadata = pd.read_csv(mouse_metadata_path)
study_results = pd.read_csv(study_results_path)

# Combine the data into a single dataset
mouse_data_complete = pd.merge(study_results, mouse_metadata, how="left",on="Mouse ID")

# Display the data table for preview
mouse_data_complete.head(10)
# Checking the number of mice.
mouse_count = mouse_data_complete["Mouse ID"].nunique()
mouse_count
# Getting the duplicate mice by ID number that shows up for Mouse ID and Timepoint. 
duplicate_ID = mouse_data_complete[mouse_data_complete[["Mouse ID", "Timepoint"]].duplicated()]["Mouse ID"].unique()
duplicate_ID
# Optional: Get all the data for the duplicate mouse ID. 
duplicate_data = mouse_data_complete[mouse_data_complete["Mouse ID"].isin(duplicate_ID)]
duplicate_data
# Create a clean DataFrame by dropping the duplicate mouse by its ID.
#mouse_data_clean = mouse_data_complete.drop_duplicates(subset=["Mouse ID"])
mouse_data_clean = mouse_data_complete[~mouse_data_complete["Mouse ID"].isin(duplicate_ID)]
mouse_data_clean.set_index("Mouse ID")
mouse_data_clean.head()
# Checking the number of mice in the clean DataFrame.
mouse_count_clean = mouse_data_clean["Mouse ID"].nunique()
mouse_count_clean
## Summary Statistics
# Generate a summary statistics table of mean, median, variance, standard deviation, and SEM of the tumor volume for each regimen

# Use groupby and summary statistical methods to calculate the following properties of each drug regimen: 
# mean, median, variance, standard deviation, and SEM of the tumor volume. 
# Assemble the resulting series into a single summary DataFrame.

tumor_mean = mouse_data_clean.groupby(["Drug Regimen"]).mean()["Tumor Volume (mm3)"]
tumor_median = mouse_data_clean.groupby(["Drug Regimen"]).median()["Tumor Volume (mm3)"]
tumor_variance = mouse_data_clean.groupby(["Drug Regimen"]).var()["Tumor Volume (mm3)"]
tumor_st_dev = mouse_data_clean.groupby(["Drug Regimen"]).std()["Tumor Volume (mm3)"]
tumor_sem = mouse_data_clean.groupby(["Drug Regimen"]).sem()["Tumor Volume (mm3)"]

tumor_summary = pd.DataFrame({
     "Mean Tumor Volume": tumor_mean,
     "Median Tumor Volume": tumor_median,
     "Tumor Volume Variance": tumor_variance,
     "Tumor Volume St Dev": tumor_st_dev,
     "Tumor Volume St Err": tumor_sem
 })

tumor_summary
# Generate a summary statistics table of mean, median, variance, standard deviation, 
# and SEM of the tumor volume for each regimen

# Using the aggregation method, produce the same summary statistics in a single line.
tumor_summary_agg = mouse_data_clean.groupby(["Drug Regimen"]).agg({"Tumor Volume (mm3)": ["mean","median","var","std","sem"]})
#tumor_summary_agg
## Bar and Pie Charts
# Generate a bar plot showing the total number of timepoints for all mice tested for each drug regimen using Pandas.
mouse_tested = mouse_data_clean.groupby(["Drug Regimen"]).count()["Mouse ID"]

mouse_bar_chart = mouse_tested.plot(kind="bar")
mouse_bar_chart.set_ylabel("Number of Mice Tested")
plt.show()
# Generate a bar plot showing the total number of timepoints for all mice tested for each drug regimen using pyplot.
x_axis = np.arange(len(mouse_tested))
plt.bar(x_axis, mouse_tested, alpha=0.5, align="center")

tick_locations = [value for value in x_axis]
plt.xticks(tick_locations, mouse_data_clean["Drug Regimen"].sort_values().unique(), rotation="vertical")

plt.xlabel("Drug Regimen")
plt.ylabel("Number of Mice Tested")

plt.show()

# Generate a pie plot showing the distribution of female versus male mice using Pandas
mouse_sex = mouse_data_clean.groupby(["Sex"]).count()["Mouse ID"].sort_values(ascending=False)

mouse_pie_chart = mouse_sex.plot(kind="pie", autopct="%.1f%%")
mouse_pie_chart.set_ylabel("Sex")

plt.show()

# Generate a pie plot showing the distribution of female versus male mice using pyplot
labels = mouse_data_clean["Sex"].sort_values(ascending=False).unique()

plt.pie(mouse_sex, labels=labels,autopct="%.1f%%")
plt.ylabel("Sex")

plt.show()

## Quartiles, Outliers and Boxplots
# Calculate the final tumor volume of each mouse across four of the treatment regimens:  
# Capomulin, Ramicane, Infubinol, and Ceftamin

# Start by getting the last (greatest) timepoint for each mouse
max_timepoint = mouse_data_clean.groupby(["Mouse ID"]).max()["Timepoint"]
max_timepoint_df = pd.DataFrame(max_timepoint)

# Merge this group df with the original DataFrame to get the tumor volume at the last timepoint
final_volume_df = pd.merge(max_timepoint_df, mouse_data_clean, on=["Mouse ID","Timepoint"], how="left")
#treatment_regimen_data = treatment_regimen_data.loc[regimen_data["Drug Regimen"].isin(regimens)]
final_volume_df
final_volume_df.to_csv("final_volume.csv")

# Put treatments into a list for for loop (and later for plot labels)
regimens = ["Capomulin","Ramicane","Infubinol","Ceftamin"]
regimen_data = []

for drug in regimens:
    regimen_volume = final_volume_df.loc[(final_volume_df["Drug Regimen"] == drug)]["Tumor Volume (mm3)"]

# capomulin = treatment_regimen_data.loc[(treatment_regimen_data["Drug Regimen"] == "Capomulin")]["Tumor Volume (mm3)"] 
# ramicane = treatment_regimen_data.loc[(treatment_regimen_data["Drug Regimen"] == "Ramicane")]["Tumor Volume (mm3)"]
# infubinol = treatment_regimen_data.loc[(treatment_regimen_data["Drug Regimen"] == "Infubionol")]["Tumor Volume (mm3)"]
# ceftamin = treatment_regimen_data.loc[(treatment_regimen_data["Drug Regimen"] == "Ceftamin")]["Tumor Volume (mm3)"]

# Create empty list to fill with tumor vol data (for plotting)
    regimen_data.append(regimen_volume)

    # Calculate the IQR and quantitatively determine if there are any potential outliers. 
    quartiles = regimen_volume.quantile([.25,.5,.75])
    lowerq = quartiles[0.25]
    upperq = quartiles[0.75]
    iqr = upperq-lowerq

    lower_bound = lowerq - (1.5*iqr)
    upper_bound = upperq + (1.5*iqr)
     
    # Locate the rows which contain mice on each drug and get the tumor volumes
    
    # add subset 
        
    # Determine outliers using upper and lower bounds
    outliers = regimen_volume[(regimen_volume >= upper_bound) | (regimen_volume <= lower_bound)]
    print(f"{drug}'s potential outliers: {outliers}")
# Generate a box plot that shows the distrubution of the tumor volume for each treatment group.

# Edit outliers on boxplot for visibility
flierprops = dict(marker='o', markerfacecolor='r', markersize=8, markeredgecolor='black')

# Plot boxplot
plt.boxplot(regimen_data, flierprops=flierprops)

# Add title and labels to box plot
plt.title("Final Tumor Volume by Drug")
plt.ylabel("Final Tumor Volume (mm3)")
plt.xticks([1,2,3,4],regimens)

plt.show()

## Line and Scatter Plots
# Generate a line plot of tumor volume vs. time point for a mouse treated with Capomulin


# Generate a scatter plot of average tumor volume vs. mouse weight for the Capomulin regimen


## Correlation and Regression
# Calculate the correlation coefficient and linear regression model 
# for mouse weight and average tumor volume for the Capomulin regimen


